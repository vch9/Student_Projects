make: Entering directory '/home/opam/source/flap/tests/m2'
make[1]: Entering directory '/home/opam/source/flap/tests/m2'
make[1]: Leaving directory '/home/opam/source/flap/tests/m2'
make[1]: Entering directory '/home/opam/source/flap/tests/m2/hopix/interpreter/good'
========================================================
In interpreter/good
[ OK ]   01-arithmetic-01.hopix

INPUT:
let main = print_int (999)
OUTPUT: 
999EXPECTED: 
999--------------------------------------------------------
[ OK ]   02-arithmetic-02.hopix

INPUT:
let x = 72 + 1
let test = print_int (x)
OUTPUT: 
73EXPECTED: 
73--------------------------------------------------------
[ OK ]   03-arithmetic-03.hopix

INPUT:
let x = 72 - 1
let test = print_int (x)
OUTPUT: 
71EXPECTED: 
71--------------------------------------------------------
[ OK ]   04-arithmetic-04.hopix

INPUT:
let x = 37 * 2
let test = print_int (x)
OUTPUT: 
74EXPECTED: 
74--------------------------------------------------------
[ OK ]   05-arithmetic-05.hopix

INPUT:
let x = 73 / 2
let test = print_int (x)
OUTPUT: 
36EXPECTED: 
36--------------------------------------------------------
[ OK ]   06-arithmetic-06.hopix

INPUT:
let wow = 1 + 2 * 3 - 4 / 5 * 6 - 7 * 8 + 9
let test = print_int (wow)

OUTPUT: 
-40EXPECTED: 
-40--------------------------------------------------------
[ OK ]   07-arithmetic-07.hopix

INPUT:
let overflow = 4294967296 * 4294967296 + 1
let main = print_int (overflow)
OUTPUT: 
1EXPECTED: 
1--------------------------------------------------------
[ OK ]   08-arithmetic-08.hopix

INPUT:
let overflow = 4294967296 * (4294967296 / 2) + (4294967296 * (4294967296 / 2) - 1)
let main = print_int (overflow)
OUTPUT: 
-1EXPECTED: 
-1--------------------------------------------------------
[ OK ]   09-boolean-01.hopix

INPUT:
let btrue = true
let bfalse = false
let test = print_string ("OK\n")
OUTPUT: 
OK
EXPECTED: 
OK
--------------------------------------------------------
[ OK ]   10-boolean-02.hopix

INPUT:
let b = true
let test = if (b) { print_string ("OK\n") } else { print_string ("KO\n") }
OUTPUT: 
OK
EXPECTED: 
OK
--------------------------------------------------------
[ OK ]   11-boolean-03.hopix

INPUT:
let b = (0 =? 0)
let test = if (b) { print_string ("TOTO\n") } else { print_string ("KO\n") }
OUTPUT: 
TOTO
EXPECTED: 
TOTO
--------------------------------------------------------
[ OK ]   12-boolean-04.hopix

INPUT:
let b = (0 <? 0)
let test = if (b) { print_string ("TOTO\n") } else { print_string ("BIRD\n") }
OUTPUT: 
BIRD
EXPECTED: 
BIRD
--------------------------------------------------------
[ OK ]   13-boolean-05.hopix

INPUT:
let b = (0 <? 0) && true
let test = if (b) { print_string ("TOTO\n") } else { print_string ("BIRD\n") }
OUTPUT: 
BIRD
EXPECTED: 
BIRD
--------------------------------------------------------
[ OK ]   14-string-01.hopix

INPUT:
let some_string = "Easy as a pie!\n"
let test = print_string (some_string)
OUTPUT: 
Easy as a pie!
EXPECTED: 
Easy as a pie!
--------------------------------------------------------
[ OK ]   15-constructor-01.hopix

INPUT:
let s = S
let test = print_string ("Construction succeeds.\n")
OUTPUT: 
Construction succeeds.
EXPECTED: 
Construction succeeds.
--------------------------------------------------------
[ OK ]   16-constructor-02.hopix

INPUT:
let s = S (0)
let test = print_string ("Construction succeeds.\n")
OUTPUT: 
Construction succeeds.
EXPECTED: 
Construction succeeds.
--------------------------------------------------------
[ OK ]   17-constructor-03.hopix

INPUT:
let s = S (0, "FooBaR")
let test = print_string ("Construction succeeds.\n")
OUTPUT: 
Construction succeeds.
EXPECTED: 
Construction succeeds.
--------------------------------------------------------
[ OK ]   18-constructor-04.hopix

INPUT:
let nil = Nil
let l1 = Cons (0, nil)
let l2 = Cons (1, l1)
let test = print_string ("Construction succeeds.\n")
OUTPUT: 
Construction succeeds.
EXPECTED: 
Construction succeeds.
--------------------------------------------------------
[ OK ]   19-record-01.hopix

INPUT:
let t = { x = 1 }
let test = print_string ("Recording succeeds.\n")
OUTPUT: 
Recording succeeds.
EXPECTED: 
Recording succeeds.
--------------------------------------------------------
[ OK ]   20-record-02.hopix

INPUT:
let t = { x = 1, y = "FooBaR" }
let test = print_string ("Recording succeeds.\n")
OUTPUT: 
Recording succeeds.
EXPECTED: 
Recording succeeds.
--------------------------------------------------------
[ OK ]   21-record-03.hopix

INPUT:
let t = { x = 1, y = "FooBaR" }
let u = { z = t, some_more = t }
let test = print_string ("Recording succeeds.\n")
OUTPUT: 
Recording succeeds.
EXPECTED: 
Recording succeeds.
--------------------------------------------------------
[ OK ]   22-field-01.hopix

INPUT:
let t = { x = "Field extraction is a success!\n" }
let z = t.x
let test = print_string (z)

OUTPUT: 
Field extraction is a success!
EXPECTED: 
Field extraction is a success!
--------------------------------------------------------
[ OK ]   23-field-02.hopix

INPUT:
let t = { a = "0", x = "Field extraction is still a success!\n", y = 31 }
let z = t.x
let test = print_string (z)
OUTPUT: 
Field extraction is still a success!
EXPECTED: 
Field extraction is still a success!
--------------------------------------------------------
[ OK ]   24-field-03.hopix

INPUT:
let t = { a = "0", x = "Field extraction is still a success!\n", y = 31 }
let u = { a = { a = { a = t } }, b = 42 }
let z = u.a.a.a.x
let test = print_string (z)
OUTPUT: 
Field extraction is still a success!
EXPECTED: 
Field extraction is still a success!
--------------------------------------------------------
[ OK ]   25-sequence-01.hopix

INPUT:
let test =
  print_string ("Two actions...");
  print_string ("...are separated by a semicolon!\n")
OUTPUT: 
Two actions......are separated by a semicolon!
EXPECTED: 
Two actions......are separated by a semicolon!
--------------------------------------------------------
[ OK ]   26-sequence-02.hopix

INPUT:
let test =
    print_string ("This actually should");
    print_string (" work with");
    print_string (" any number of");
    print_string (" actions!\n")
OUTPUT: 
This actually should work with any number of actions!
EXPECTED: 
This actually should work with any number of actions!
--------------------------------------------------------
[ OK ]   27-local-definition-01.hopix

INPUT:
let test =
  let x = "This test is OK.\n";
  print_string (x)
OUTPUT: 
This test is OK.
EXPECTED: 
This test is OK.
--------------------------------------------------------
[ OK ]   28-local-definition-02.hopix

INPUT:
let test =
  let x = "This test is KO.\n";
  let x = "This test is OK.\n";
  print_string (x)
OUTPUT: 
This test is OK.
EXPECTED: 
This test is OK.
--------------------------------------------------------
[ OK ]   29-local-definition-03.hopix

INPUT:
let test =
  let x = "This test is KO.\n";
  let x = "This test is KO.\n";
  let x = "This test is OK.\n";
  print_string (x)
OUTPUT: 
This test is OK.
EXPECTED: 
This test is OK.
--------------------------------------------------------
[ OK ]   30-local-definition-04.hopix

INPUT:
let test =
  let x = "This test is KO.\n";
  let x = (
    let x = "This test is";
    print_string (x)
  );
  print_string (" OK!\n")
OUTPUT: 
This test is OK!
EXPECTED: 
This test is OK!
--------------------------------------------------------
[ OK ]   31-local-definition-05.hopix

INPUT:
let test =
  let x = "This test is KO.\n";
  let x = (
    let x = "This test is";
    print_string (x)
  );
  print_string (" OK!\n")
OUTPUT: 
This test is OK!
EXPECTED: 
This test is OK!
--------------------------------------------------------
[ OK ]   32-application.hopix

INPUT:
let id = \x -> x
let test = print_string (id ("This test is OK.\n"))

OUTPUT: 
This test is OK.
EXPECTED: 
This test is OK.
--------------------------------------------------------
[ OK ]   33-application-02.hopix

INPUT:
let first = \(x, y) -> x
let test =
  print_string ("This test is ");
  print_string (first ("OK", "KO"));
  print_string (".\n")
OUTPUT: 
This test is OK.
EXPECTED: 
This test is OK.
--------------------------------------------------------
[ OK ]   34-application-03.hopix

INPUT:
let apply = \(f, x) -> f (x)
let id = \x -> x
let test = print_string (apply (id, "This test is OK.\n"))
OUTPUT: 
This test is OK.
EXPECTED: 
This test is OK.
--------------------------------------------------------
[ OK ]   35-application-04.hopix

INPUT:
let test =
    let msg = "This test is OK.\n";
    let cst = (\x -> msg);
    print_string (cst ("This test is KO.\n"))
OUTPUT: 
This test is OK.
EXPECTED: 
This test is OK.
--------------------------------------------------------
[ OK ]   36-allocate-01.hopix

INPUT:
let r = ref 0
let test = print_string ("Allocate went well.\n")

OUTPUT: 
Allocate went well.
EXPECTED: 
Allocate went well.
--------------------------------------------------------
[ OK ]   37-allocate-02.hopix

INPUT:
let r = ref "This test is OK.\n"
let test = print_string (!r)
OUTPUT: 
This test is OK.
EXPECTED: 
This test is OK.
--------------------------------------------------------
[ OK ]   38-allocate-03.hopix

INPUT:
let r = ref "This test is KO.\n"
let test =
    r := "This test is OK.\n";
    print_string (!r)
OUTPUT: 
This test is OK.
EXPECTED: 
This test is OK.
--------------------------------------------------------
[ OK ]   39-allocate-04.hopix

INPUT:
let r = ref "KO"
let alias = r
let test =
    alias := "OK";
    print_string ("This test is ");
    print_string (!r);
    print_string (".\n")
OUTPUT: 
This test is OK.
EXPECTED: 
This test is OK.
--------------------------------------------------------
[ OK ]   40-allocate-05.hopix

INPUT:
let r1 = ref (ref "KO")
let r2 = ref "KO"
let test =
    r1 := r2;
    r2 := "OK";
    print_string ("This test is ");
    print_string (!!r1);
    print_string (".\n")
OUTPUT: 
This test is OK.
EXPECTED: 
This test is OK.
--------------------------------------------------------
[ OK ]   41-allocate-06.hopix

INPUT:
let f = ref (\x -> x)
let test =
    f := (\x -> "This test is OK.\n");
    print_string (!f ("This test is KO.\n"))
OUTPUT: 
This test is OK.
EXPECTED: 
This test is OK.
--------------------------------------------------------
[ KO ]   -->  42-match-01.hopix

INPUT:
let test =
    switch (Here) {
    | Here    -> print_string ("This test is OK.\n")
    | NotHere -> print_string ("This test is KO.\n")
    }
OUTPUT: 

(Failure "no pattern found in branchs")
EXPECTED: 
This test is OK.
--------------------------------------------------------
[ KO ]   -->  43-match-02.hopix

INPUT:
let test =
    switch (Here ("OK")) {
    | Here (x) -> print_string ("This test is "); print_string (x); print_string (".\n")
    | NotHere  -> print_string ("This test is KO.\n")
    }
OUTPUT: 

(Failure "no pattern found in branchs")
EXPECTED: 
This test is OK.
--------------------------------------------------------
[ KO ]   -->  44-match-03.hopix

INPUT:
let test =
    switch (Here ("O", "K")) {
    | Here (x, y) ->
      print_string ("This test is ");
      print_string (x);
      print_string (y);
      print_string (".\n")
    | NotHere  -> print_string ("This test is KO.\n")
    }
OUTPUT: 

(Failure "no pattern found in branchs")
EXPECTED: 
This test is OK.
--------------------------------------------------------
[ KO ]   -->  45-match-04.hopix

INPUT:
let test =
    switch (Here ("O", "K", ".\n")) {
    | Here (x, y, z) ->
      print_string ("This test is ");
      print_string (x);
      print_string (y);
      print_string (z)
    | NotHere -> print_string ("This test is KO.\n")
    }
OUTPUT: 

(Failure "no pattern found in branchs")
EXPECTED: 
This test is OK.
--------------------------------------------------------
[ KO ]   -->  46-match-05.hopix

INPUT:
let test =
    switch (Deep (Deep (Deep (Inside ("OK"))))) {
    | Deep (Deep (Deep (Inside (you_find_me)))) ->
      print_string ("This test is ");
      print_string (you_find_me);
      print_string (".\n")
    }
OUTPUT: 

(Failure "no pattern found in branchs")
EXPECTED: 
This test is OK.
--------------------------------------------------------
[ KO ]   -->  47-match-06.hopix

INPUT:
let test =
    switch (Deep (Deep (Deep (Inside ("KO", "KO", "OK"))))) {
    | Deep (Deep (Deep (Inside (not_here, neither_here, you_found_me)))) ->
      print_string ("This test is ");
      print_string (you_found_me);
      print_string (".\n")
    }
OUTPUT: 

(Failure "no pattern found in branchs")
EXPECTED: 
This test is OK.
--------------------------------------------------------
[ KO ]   -->  48-match-07.hopix

INPUT:
let test =
    switch (Deep (Deep (Deep (Inside ("KO", "KO", "OK"))))) {
    | Deep (Deep (Deep (NotHere | Inside (not_here, neither_here, you_found_me)))) ->
      print_string ("This test is ");
      print_string (you_found_me);
      print_string (".\n")
    }
OUTPUT: 

(Failure "no pattern found in branchs")
EXPECTED: 
This test is OK.
--------------------------------------------------------
[ KO ]   -->  49-match-08.hopix

INPUT:
let test =
    switch (Deep (Deep (Deep (Inside ("KO", "KO", "OK"))))) {
    | Deep (NotHere | Deep (Deep (NotHere | Inside (not_here, neither_here, you_found_me)))) ->
      print_string ("This test is ");
      print_string (you_found_me);
      print_string (".\n")
    }
OUTPUT: 

(Failure "no pattern found in branchs")
EXPECTED: 
This test is OK.
--------------------------------------------------------
[ KO ]   -->  50-match-09.hopix

INPUT:
let test =
    switch (K ("OK")) {
    | K (x & y) ->
      print_string ("This test is ");
      print_string (x);
      print_string (" and ");
      print_string (y);
      print_string (".\n")
    }
OUTPUT: 

(Failure "no pattern found in branchs")
EXPECTED: 
This test is OK and OK.
--------------------------------------------------------
[ KO ]   -->  51-match-10.hopix

INPUT:
let test =
    switch (K (K ("OK"))) {
    | K (x & K (y)) ->
      switch (x) {
      | K (z) ->
         print_string ("This test is ");
         print_string (y);
         print_string (".\n")
      }
    }
OUTPUT: 

(Failure "no pattern found in branchs")
EXPECTED: 
This test is OK.
--------------------------------------------------------
[ OK ]   52-match-11.hopix

INPUT:
let test =
    switch (K (K ("OK"))) {
    | _ ->
         print_string ("This test is too easy.\n")
    }
OUTPUT: 
This test is too easy.
EXPECTED: 
This test is too easy.
--------------------------------------------------------
[ KO ]   -->  53-match-12.hopix

INPUT:
let write = \x ->
  switch (x) {
  | O -> print_string ("O")
  | K -> print_string ("K")
  | D -> print_string (".")
  | N -> print_string ("\n")
  }

let test =
  print_string ("This test is ");
  write (O);
  write (K);
  write (D);
  write (N)
OUTPUT: 
This test is 
(Failure "no pattern found in branchs")
EXPECTED: 
This test is OK.
--------------------------------------------------------
[ KO ]   -->  54-match-13.hopix

INPUT:
fun show (l) =
  switch (l) { N -> nothing | C (x, xs) -> print_string (x); show (xs) }

let test =
  show (C ("This", C (" test is ", C ("OK", C (".\n.", N)))))
OUTPUT: 

(Failure "no pattern found in branchs")
EXPECTED: 
This test is OK.
.--------------------------------------------------------
[ OK ]   55-if-01.hopix

INPUT:
fun f (x) =
  if (x >? 0) { "OK" } else { "KO" }

let test =
  print_string ("This test is ");
  print_string (f (33));
  print_string (".\n")
OUTPUT: 
This test is OK.
EXPECTED: 
This test is OK.
--------------------------------------------------------
[ OK ]   56-if-02.hopix

INPUT:
fun f (x) =
  if (x >? 0) {
    if (x >? 1) { "OK" }
    else { "KO" }
  } else { "KO" }

let test =
  print_string ("This test is ");
  print_string (f (33));
  print_string (".\n")
OUTPUT: 
This test is OK.
EXPECTED: 
This test is OK.
--------------------------------------------------------
[ OK ]   57-if-03.hopix

INPUT:
fun f (x) =
  if (x >? 0) { "KO" }
  else { if (x <? 0) { "KO" }
  else { "OK" } }

let test =
  print_string ("This test is ");
  print_string (f (0));
  print_string (".\n")
OUTPUT: 
This test is OK.
EXPECTED: 
This test is OK.
--------------------------------------------------------
[ OK ]   58-while-01.hopix

INPUT:
let test =
    let x = ref 5;
    let y = ref 0;
    while (!x >? 0) {
      x := !x - 1;
      y := !y + 1
    };
    if (!y =? 5) {
      print_string ("This test is OK!\n")
    } else {
      print_string ("This is KO!\n")
    }
OUTPUT: 
This test is OK!
EXPECTED: 
This test is OK!
--------------------------------------------------------
[ OK ]   59-while-02.hopix

INPUT:
let test =
    let x = ref 5;
    let y = ref 0;
    let z = ref 5;
    while (!x >? 0) {
      x := !x - 1;
      while (!z >? 0) {
        y := !y + 1;
	z := !z - 1
      };
      y := !y + 1
    };
    if (!y =? 10) {
      print_string ("This test is OK!\n")
    } else {
      print_string ("This is KO!\n")
    }
OUTPUT: 
This test is OK!
EXPECTED: 
This test is OK!
--------------------------------------------------------
[ OK ]   60-while-03.hopix

INPUT:
let test =
    let x = ref 5;
    let y = ref 0;
    let z = ref 5;
    while (!x <? 0) {
      x := !x - 1;
      y := !y + 1
    };
    if (!x =? 5) {
      print_string ("This test is OK!\n")
    } else {
      print_string ("This is KO!\n")
    }
OUTPUT: 
This test is OK!
EXPECTED: 
This test is OK!
--------------------------------------------------------
[ OK ]   61-while-04.hopix

INPUT:
let test =
    let r = ref 1;
    let n = ref 5;
    while (!n >? 0) {
      r := !r * !n;
      n := !n - 1
    };
    print_string ("This test is ");
    print_string (if (!r =? 120) { "OK!\n" } else { "KO!\n" })
OUTPUT: 
This test is OK!
EXPECTED: 
This test is OK!
--------------------------------------------------------
[ KO ]   -->  62-for-01.hopix

INPUT:
let test =
    let r = ref 1;
    for i in (1 to 5) {
      r := !r * i
    };
    print_string ("This test is ");
    print_string (if (!r =? 120) { "OK!\n" } else { "KO!\n" })
OUTPUT: 
This test is KO!
EXPECTED: 
This test is OK!
--------------------------------------------------------
[ KO ]   -->  63-for-02.hopix

INPUT:
let test =
    let r = ref 1;
    for i in (1 to 5) {
      for j in (1 to 5) {
        r := !r * j
      };
      r := !r * i;
      for j in (1 to 5) {
        r := !r / j
      }
    };
    print_string ("This test is ");
    print_string (if (!r =? 120) { "OK!\n" } else { "KO!\n" })
OUTPUT: 
This test is KO!
EXPECTED: 
This test is OK!
--------------------------------------------------------
[ KO ]   -->  64-for-03.hopix

INPUT:
let test =
    let r = ref 1;
    for i in (1 to 5) {
      for i in (1 to 5) {
        r := !r * i
      };
      r := !r * i;
      for i in (1 to 5) {
        r := !r / i
      }
    };
    print_string ("This test is ");
    print_string (if (!r =? 120) { "OK!\n" } else { "KO!\n" })
OUTPUT: 
This test is KO!
EXPECTED: 
This test is OK!
--------------------------------------------------------
[ KO ]   -->  65-for-04.hopix

INPUT:
let test =
    let r = ref 1;
    for i in (1 to 10) {
      for i in (1 to 5) {
        r := !r * i
      };
      r := !r * (1 + i / 10);
      for i in (1 to 5) {
        r := !r / i
      }
    };
    print_string ("This test is ");
    print_string (if (!r =? 2) { "OK!\n" } else { "KO!\n" })
OUTPUT: 
This test is KO!
EXPECTED: 
This test is OK!
--------------------------------------------------------
[ KO ]   -->  66-concat.hopix

INPUT:
fun concat (l1, l2) =
  switch (l1) {
  | N -> l2
  | C (x, xs) -> C (x, concat (xs, l2))
  }

let l = C (1, C (2, N))
let l = concat (l, l)
let l = concat (l, l)
let l = concat (l, l)
let l = concat (l, l)
let l = concat (l, l)
let l = concat (l, l)

fun len (l) =
  switch (l) {
  | N -> 0
  | C (x, xs) -> 1 + len (xs)
  }

let test =
  print_int (len (l));
  print_string ("\n")



OUTPUT: 

(Failure "no pattern found in branchs")
EXPECTED: 
128
--------------------------------------------------------
[ KO ]   -->  67-sorted.hopix

INPUT:
fun concat (l1, l2) =
  switch (l1) {
  | N -> l2
  | C (x, xs) -> C (x, concat (xs, l2))
  }

let l = C (1, C (2, N))
let l = concat (l, l)
let l = concat (l, l)
let l = concat (l, l)
let l = concat (l, l)
let l = concat (l, l)
let l = concat (l, l)

fun len (l) =
  switch (l) {
  | N -> 0
  | C (x, xs) -> 1 + len (xs)
  }

fun sorted (l) =
  switch (l) {
  | N | C (_, N) -> true
  | C (x, C (y, _) & l) -> x <=? y && sorted (l)
  }

let l2 = C (1, C (2, C (6, C (7, N))))

let l3 = C (-1, C (2, C (6, C (70, N))))

let l4 = C (-1, C (20, C (6, C (70, N))))

fun not (b) = if (b) { false } else { true }

let r =
  not (sorted (l)) &&
  sorted (l2) &&
  sorted (l3) &&
  not (sorted (l4))

let test =
  print_string ("This test is ");
  print_string (if (r) { "OK!\n" } else { "KO!\n" })



OUTPUT: 

(Failure "no pattern found in branchs")
EXPECTED: 
This test is OK!
--------------------------------------------------------
[ KO ]   -->  68-sort.hopix

INPUT:
fun concat (l1, l2) =
  switch (l1) {
  | N -> l2
  | C (x, xs) -> C (x, concat (xs, l2))
  }

let l = C (1, C (2, N))
let l = concat (l, l)
let l = concat (l, l)
let l = concat (l, l)
let l = concat (l, l)
let l = concat (l, l)
let l = concat (l, l)

fun len (l) =
  switch (l) {
  | N -> 0
  | C (x, xs) -> 1 + len (xs)
  }

fun sorted (l) =
  switch (l) {
  | N | C (_, N) -> true
  | C (x, C (y, _) & l) -> x <=? y && sorted (l)
  }

let l2 = C (1, C (2, C (6, C (7, N))))

let l3 = C (-1, C (2, C (6, C (70, N))))

let l4 = C (-1, C (20, C (6, C (70, N))))

fun not (b) = if (b) { false } else { true }

fun sort (l) =
    switch (l) {
    | N -> N
    | C (x, xs) -> switch (pivot (x, xs)) {
      | (l1, l2) ->
        let l1 = sort (l1);
	let l2 = sort (l2);
        concat (l1, C (x, l2))
      }
    }
and pivot (x, l) =
    switch (l) {
    | N ->
      (N, N)
    | C (y, ys) ->
      switch (pivot (x, ys)) {
      | (l1, l2) ->
         if (y >? x) { (l1,  C (y, l2)) } else { (C (y, l1), l2) }
      }
    }

fun print (l) =
    switch (l) {
    | N -> print_string ("\n")
    | C (x, xs) -> print_int (x); print_string (" "); print (xs)
    }

fun show (l) =
    print (l);
    l

let r =
  sorted (sort (l)) &&
  sorted (sort (l2)) &&
  sorted (sort (l3)) &&
  sorted (sort (l4))

let test =
  print_string ("This test is ");
  print_string (if (r) { "OK!\n" } else { "KO!\n" })
OUTPUT: 

(Failure "no pattern found in branchs")
EXPECTED: 
This test is OK!
--------------------------------------------------------
[ KO ]   -->  69-sort-big.hopix

INPUT:
fun concat (l1, l2) =
  switch (l1) {
  | N -> l2
  | C (x, xs) -> C (x, concat (xs, l2))
  }

let l = C (1, C (2, N))
let l = concat (l, l)
let l = concat (l, l)
let l = concat (l, l)
let l = concat (l, l)
let l = concat (l, l)
let l = concat (l, l)

fun len (l) =
  switch (l) {
  | N -> 0
  | C (x, xs) -> 1 + len (xs)
  }

fun sorted (l) =
  switch (l) {
  | N | C (_, N) -> true
  | C (x, C (y, _) & l) -> x <=? y && sorted (l)
  }

let l2 = C (1, C (2, C (6, C (7, N))))

let l3 = C (-1, C (2, C (6, C (70, N))))

let l4 = C (-1, C (20, C (6, C (70, N))))

fun not (b) = if (b) { false } else { true }

fun sort (l) =
    switch (l) {
    | N -> N
    | C (x, xs) -> switch (pivot (x, xs)) {
      | (l1, l2) ->
        let l1 = sort (l1);
	let l2 = sort (l2);
        concat (l1, C (x, l2))
      }
    }
and pivot (x, l) =
    switch (l) {
    | N ->
      (N, N)
    | C (y, ys) ->
      switch (pivot (x, ys)) {
      | (l1, l2) ->
         if (y >? x) { (l1,  C (y, l2)) } else { (C (y, l1), l2) }
      }
    }

fun print (l) =
    switch (l) {
    | N -> print_string ("\n")
    | C (x, xs) -> print_int (x); print_string (" "); print (xs)
    }

fun show (l) =
    print (l);
    l

fun generate (accu, n) =
    if (n =? 0) { accu } else { generate (C (n, accu), n - 1) }

let r =
  sorted (sort (generate (N, 500)))

let test =
  print_string ("This test is ");
  print_string (if (r) { "OK!\n" } else { "KO!\n" })
OUTPUT: 

(Failure "no pattern found in branchs")
EXPECTED: 
This test is OK!
--------------------------------------------------------
[ KO ]   -->  70-tree.hopix

INPUT:
fun make (n) =
    if (n =? 0) { Leaf } else { Node (make (n - 1), make (n - 1)) }

fun count (accu, t) =
    switch (t) {
    | Leaf -> 1 + accu
    | Node (l, r) -> count (count (accu, l), r)
    }

let test =
    for i in (0 to 14) {
        print_int (count (0, make (i)));
    	print_string ("\n")
    }
OUTPUT: 

(Failure "no pattern found in branchs")
EXPECTED: 
1
2
4
8
16
32
64
128
256
512
1024
2048
4096
8192
16384
--------------------------------------------------------
[ KO ]   -->  71-list-monad.hopix

INPUT:
fun map (f, l) =
    switch (l) { N -> N | C (x, xs) -> C (f (x), map (f, xs)) }

fun concat (l1, l2) =
    switch (l1) { N -> l2 | C (x, xs) -> C (x, concat (xs, l2)) }

fun flatten (l) =
    switch (l) { N -> N | C (l, ls) -> concat (l, flatten (ls)) }

fun return (x) = C (x, N)

fun bind (x, f) = flatten (map (f, x))

let fail = N

fun some d = C (d, N)

fun range (start, stop) = if (start >? stop) { N } else { C (start, range (start + 1, stop)) }

fun all_sums (start, stop, n) =
    bind (range (start, stop), \x ->
    bind (range (start, stop), \y ->
    if (x + y =? n) { return (some (x, y, n)) } else { fail }
    ))

fun show_sum (x, y, n) =
    print_int (x);
    print_string (" + ");
    print_int (y);
    print_string (" = ");
    print_int (n);
    print_string ("\n")

fun iter (f, l) =
    switch (l) { N -> nothing | C (x, xs) -> f (x); iter (f, xs) }

let test =
    iter (show_sum, flatten (all_sums (13, 73, 73)))

OUTPUT: 

(Failure "no pattern found in branchs")
EXPECTED: 
13 + 60 = 73
14 + 59 = 73
15 + 58 = 73
16 + 57 = 73
17 + 56 = 73
18 + 55 = 73
19 + 54 = 73
20 + 53 = 73
21 + 52 = 73
22 + 51 = 73
23 + 50 = 73
24 + 49 = 73
25 + 48 = 73
26 + 47 = 73
27 + 46 = 73
28 + 45 = 73
29 + 44 = 73
30 + 43 = 73
31 + 42 = 73
32 + 41 = 73
33 + 40 = 73
34 + 39 = 73
35 + 38 = 73
36 + 37 = 73
37 + 36 = 73
38 + 35 = 73
39 + 34 = 73
40 + 33 = 73
41 + 32 = 73
42 + 31 = 73
43 + 30 = 73
44 + 29 = 73
45 + 28 = 73
46 + 27 = 73
47 + 26 = 73
48 + 25 = 73
49 + 24 = 73
50 + 23 = 73
51 + 22 = 73
52 + 21 = 73
53 + 20 = 73
54 + 19 = 73
55 + 18 = 73
56 + 17 = 73
57 + 16 = 73
58 + 15 = 73
59 + 14 = 73
60 + 13 = 73
--------------------------------------------------------
[ KO ]   -->  72-list-monad-3.hopix

INPUT:
fun map f = \l ->
    switch (l) { N -> N | C (x, xs) -> C (f x, map f xs) }

fun concat l1 = \l2 ->
    switch (l1) { N -> l2 | C (x, xs) -> C (x, concat xs l2) }

fun flatten l =
    switch (l) { N -> N | C (l, ls) -> concat l (flatten ls) }

fun return (x) = C (x, N)

fun bind x = \f -> flatten (map f x)

fun range (start, stop) = if (start >? stop) { N } else { C (start, range (start + 1, stop)) }

fun all_sums (start, stop, n) =
    bind (range (start, stop)) (\x ->
    bind (range (start, stop)) (\y ->
    if (x + y =? n) { return (C ((x, y, n), N)) } else { N }
    ))

fun show_sum (x, y, n) =
   print_int (x);
   print_string (" + ");
   print_int (y);
   print_string (" = ");
   print_int (n);
   print_string ("\n")

fun iter f = \l ->
    switch (l) { N -> nothing | C (x, xs) -> f x; iter f xs }

let test =
    iter show_sum (flatten (all_sums (13, 73, 73)))

OUTPUT: 
Line 17, characters 4-8: Error (interpretation)
  `bind' is unbound.
EXPECTED: 
13 + 60 = 73
14 + 59 = 73
15 + 58 = 73
16 + 57 = 73
17 + 56 = 73
18 + 55 = 73
19 + 54 = 73
20 + 53 = 73
21 + 52 = 73
22 + 51 = 73
23 + 50 = 73
24 + 49 = 73
25 + 48 = 73
26 + 47 = 73
27 + 46 = 73
28 + 45 = 73
29 + 44 = 73
30 + 43 = 73
31 + 42 = 73
32 + 41 = 73
33 + 40 = 73
34 + 39 = 73
35 + 38 = 73
36 + 37 = 73
37 + 36 = 73
38 + 35 = 73
39 + 34 = 73
40 + 33 = 73
41 + 32 = 73
42 + 31 = 73
43 + 30 = 73
44 + 29 = 73
45 + 28 = 73
46 + 27 = 73
47 + 26 = 73
48 + 25 = 73
49 + 24 = 73
50 + 23 = 73
51 + 22 = 73
52 + 21 = 73
53 + 20 = 73
54 + 19 = 73
55 + 18 = 73
56 + 17 = 73
57 + 16 = 73
58 + 15 = 73
59 + 14 = 73
60 + 13 = 73
--------------------------------------------------------
GOOD: 49/72
SCORE: 68%

BAD: 0/0
make[1]: Leaving directory '/home/opam/source/flap/tests/m2/hopix/interpreter/good'
--------------------------------------------------------
Global results:
BAD:   0 / 0
GOOD:  49 / 72
SCORE: 68%
--------------------------------------------------------
make: Leaving directory '/home/opam/source/flap/tests/m2'
